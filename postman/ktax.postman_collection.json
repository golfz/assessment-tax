{
	"info": {
		"_postman_id": "47a4a0ab-90bc-455e-8385-8c9860a4671d",
		"name": "ktax",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "537071"
	},
	"item": [
		{
			"name": "calculations",
			"item": [
				{
					"name": "EXP01: calculate-tax (success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 29000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(29000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 500000.0,\r\n    \"wht\": 0.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 0.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "income<0 (expect code 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('expect json has message', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message')\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": -500000.0,\r\n    \"wht\": 0.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 0.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "no content-type (expect code 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('expect json has message', function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message')\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 500000.0,\r\n    \"wht\": 0.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 0.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "EXP02: calculate-tax (expect tax)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 4000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(4000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 500000.0,\r\n    \"wht\": 25000.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 0.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "wht = tax payable (expect tax = 0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 4000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 500000.0,\r\n    \"wht\": 29000.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 0.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "wht > tax payable (expect taxRefund)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 4000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxRefund).to.eql(10000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 500000.0,\r\n    \"wht\": 39000.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 0.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "EXP03: calculate with allowance (expect tax)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 19000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(19000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 500000.0,\r\n    \"wht\": 0.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 200000.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Multi Allowance, tax payable > WHT (expect tax)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 9000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(9000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 600000.0,\r\n    \"wht\": 15000.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"k-receipt\",\r\n            \"amount\": 40000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"k-receipt\",\r\n            \"amount\": 30000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 80000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 70000.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Multi Allowance, tax payable = WHT (expect tax=0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 600000.0,\r\n    \"wht\": 24000.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"k-receipt\",\r\n            \"amount\": 40000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"k-receipt\",\r\n            \"amount\": 30000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 80000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 70000.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Multi Allowance, tax payable < WHT (expect taxRefund)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 10000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxRefund).to.eql(10000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 600000.0,\r\n    \"wht\": 34000.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"k-receipt\",\r\n            \"amount\": 40000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"k-receipt\",\r\n            \"amount\": 30000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 80000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 70000.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "EXP04: net-income=340,000 (rate=10%) (expect tax, level2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 19000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(19000);\r",
									"});\r",
									"pm.test(\"expect taxLevel length 5\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxLevel.length).to.eq(5)\r",
									"})\r",
									"pm.test(\"expect level 2 = 19000\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.taxLevel).to.be.an('array');\r",
									"    \r",
									"    responseData.taxLevel.forEach((tax,index) => {\r",
									"        if (index === 1) {\r",
									"            pm.expect(tax.tax).to.equal(19000);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"totalIncome\": 500000.0,  \r\n  \"wht\": 0.0,  \r\n  \"allowances\": [  \r\n    {  \r\n      \"allowanceType\": \"donation\",  \r\n      \"amount\": 200000.0  \r\n    }  \r\n  ]  \r\n}  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "net-income=100,000 (rate=0%) (expect tax=0, all level=0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(0);\r",
									"});\r",
									"pm.test(\"expect taxLevel length 5\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxLevel.length).to.eq(5)\r",
									"})\r",
									"pm.test(\"expect all level = 0\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.taxLevel).to.be.an('array');\r",
									"    \r",
									"    responseData.taxLevel.forEach((tax) => {\r",
									"        pm.expect(tax.tax).to.equal(0);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 260000.0,\r\n    \"wht\": 0.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 200000.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "net-income=3,000,000 (rate=35%) (expect tax=660,000, all level > 0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 660,000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(660000);\r",
									"});\r",
									"pm.test(\"expect taxLevel length 5\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxLevel.length).to.eq(5)\r",
									"})\r",
									"pm.test(\"expect all level\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.taxLevel).to.be.an('array');\r",
									"    \r",
									"    responseData.taxLevel.forEach((tax,index) => {\r",
									"        if (index === 0) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 1) {\r",
									"            pm.expect(tax.tax).to.equal(35000);\r",
									"        }\r",
									"        if (index === 2) {\r",
									"            pm.expect(tax.tax).to.equal(75000);\r",
									"        }\r",
									"        if (index === 3) {\r",
									"            pm.expect(tax.tax).to.equal(200000);\r",
									"        }\r",
									"        if (index === 4) {\r",
									"            pm.expect(tax.tax).to.equal(350000);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 3160000.0,\r\n    \"wht\": 0.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 200000.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "net-income=3,000,000 (rate=35%) wht > tax payable (expect taxRefund, all level > 0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(0);\r",
									"});\r",
									"pm.test(\"expect taxRefund is 40,000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxRefund).to.eql(40000);\r",
									"});\r",
									"pm.test(\"expect taxLevel length 5\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxLevel.length).to.eq(5)\r",
									"})\r",
									"pm.test(\"expect all level\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.taxLevel).to.be.an('array');\r",
									"    \r",
									"    responseData.taxLevel.forEach((tax, index) => {\r",
									"        if (index === 0) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 1) {\r",
									"            pm.expect(tax.tax).to.equal(35000);\r",
									"        }\r",
									"        if (index === 2) {\r",
									"            pm.expect(tax.tax).to.equal(75000);\r",
									"        }\r",
									"        if (index === 3) {\r",
									"            pm.expect(tax.tax).to.equal(200000);\r",
									"        }\r",
									"        if (index === 4) {\r",
									"            pm.expect(tax.tax).to.equal(350000);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 3160000.0,\r\n    \"wht\": 700000.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 200000.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "EXP06: upload CSV (expect tax)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect taxes length 3\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxes.length).to.eq(3)\r",
									"})\r",
									"pm.test(\"verify each result\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.taxes).to.be.an('array');\r",
									"    \r",
									"    responseData.taxes.forEach((tax, index) => {\r",
									"        if (index === 0) {\r",
									"            pm.expect(tax.totalIncome).to.equal(500000);\r",
									"            pm.expect(tax.tax).to.equal(29000);\r",
									"        }\r",
									"        if (index === 1) {\r",
									"            pm.expect(tax.totalIncome).to.equal(600000);\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"            pm.expect(tax.taxRefund).to.equal(2000);\r",
									"        }\r",
									"        if (index === 2) {\r",
									"            pm.expect(tax.totalIncome).to.equal(750000);\r",
									"            pm.expect(tax.tax).to.equal(11250);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.formdata=[\r",
									"    {\r",
									"        \"key\": \"taxFile\",\r",
									"        \"type\": \"file\",\r",
									"        \"enabled\": true,\r",
									"        \"src\": \"taxes.csv\"\r",
									"    }\r",
									"]\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "taxFile",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{url}}/tax/calculations/upload-csv",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations",
								"upload-csv"
							]
						}
					},
					"response": []
				},
				{
					"name": "csv: not attatch file (expect 400 + cannot uploading file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"expect error message\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eq(\"cannot uploading file\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "taxFile",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{url}}/tax/calculations/upload-csv",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations",
								"upload-csv"
							]
						}
					},
					"response": []
				},
				{
					"name": "csv: upload file, but no content-type (expect 400 + cannot uploading file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"expect error message\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eq(\"cannot uploading file\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.formdata=[\r",
									"    {\r",
									"        \"key\": \"taxFile\",\r",
									"        \"type\": \"file\",\r",
									"        \"enabled\": true,\r",
									"        \"src\": \"taxes.csv\"\r",
									"    }\r",
									"]\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "taxFile",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{url}}/tax/calculations/upload-csv",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations",
								"upload-csv"
							]
						}
					},
					"response": []
				},
				{
					"name": "csv: not csv format (expect 400 + cannot reading csv)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"expect error message\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eq(\"cannot reading csv\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.formdata=[\r",
									"    {\r",
									"        \"key\": \"taxFile\",\r",
									"        \"type\": \"file\",\r",
									"        \"enabled\": true,\r",
									"        \"src\": \"not-csv-format.csv\"\r",
									"    }\r",
									"]\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "taxFile",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{url}}/tax/calculations/upload-csv",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations",
								"upload-csv"
							]
						}
					},
					"response": []
				},
				{
					"name": "csv: invalid parsing (expect 400 + cannot reading csv)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"expect error message\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eq(\"cannot reading csv\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.formdata=[\r",
									"    {\r",
									"        \"key\": \"taxFile\",\r",
									"        \"type\": \"file\",\r",
									"        \"enabled\": true,\r",
									"        \"src\": \"invalid-parsing.csv\"\r",
									"    }\r",
									"]\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "taxFile",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{url}}/tax/calculations/upload-csv",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations",
								"upload-csv"
							]
						}
					},
					"response": []
				},
				{
					"name": "EXP07: multiple-allowance (success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 14000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(14000);\r",
									"});\r",
									"pm.test(\"expect taxLevel length 5\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxLevel.length).to.eq(5)\r",
									"})\r",
									"pm.test(\"expect all level\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.taxLevel).to.be.an('array');\r",
									"    \r",
									"    responseData.taxLevel.forEach((tax,index) => {\r",
									"        if (index === 0) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 1) {\r",
									"            pm.expect(tax.tax).to.equal(14000);\r",
									"        }\r",
									"        if (index === 2) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 3) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 4) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 500000.0,\r\n    \"wht\": 0.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"k-receipt\",\r\n            \"amount\": 200000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 100000.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "multiple-allowance, wht = tax payable (expect tax=0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(0);\r",
									"});\r",
									"pm.test(\"expect taxLevel length 5\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxLevel.length).to.eq(5)\r",
									"})\r",
									"pm.test(\"expect all level\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.taxLevel).to.be.an('array');\r",
									"    \r",
									"    responseData.taxLevel.forEach((tax,index) => {\r",
									"        if (index === 0) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 1) {\r",
									"            pm.expect(tax.tax).to.equal(14000);\r",
									"        }\r",
									"        if (index === 2) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 3) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 4) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 500000.0,\r\n    \"wht\": 14000.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"k-receipt\",\r\n            \"amount\": 200000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 100000.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "multiple-allowance, wht > tax payable (expect taxRefund)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(0);\r",
									"});\r",
									"pm.test(\"expect taxRefund is 20,000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxRefund).to.eql(20000);\r",
									"});\r",
									"pm.test(\"expect taxLevel length 5\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxLevel.length).to.eq(5)\r",
									"})\r",
									"pm.test(\"expect all level\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.taxLevel).to.be.an('array');\r",
									"    \r",
									"    responseData.taxLevel.forEach((tax,index) => {\r",
									"        if (index === 0) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 1) {\r",
									"            pm.expect(tax.tax).to.equal(14000);\r",
									"        }\r",
									"        if (index === 2) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 3) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 4) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 500000.0,\r\n    \"wht\": 34000.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"k-receipt\",\r\n            \"amount\": 200000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 100000.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "multiple-allowance, all level (expect tax)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect tax is 286,500\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tax).to.eql(286500);\r",
									"});\r",
									"pm.test(\"expect taxRefund is undefined\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxRefund).is.undefined\r",
									"});\r",
									"pm.test(\"expect taxLevel length 5\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taxLevel.length).to.eq(5)\r",
									"})\r",
									"pm.test(\"expect all level\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.taxLevel).to.be.an('array');\r",
									"    \r",
									"    responseData.taxLevel.forEach((tax,index) => {\r",
									"        if (index === 0) {\r",
									"            pm.expect(tax.tax).to.equal(0);\r",
									"        }\r",
									"        if (index === 1) {\r",
									"            pm.expect(tax.tax).to.equal(35000);\r",
									"        }\r",
									"        if (index === 2) {\r",
									"            pm.expect(tax.tax).to.equal(75000);\r",
									"        }\r",
									"        if (index === 3) {\r",
									"            pm.expect(tax.tax).to.equal(200000);\r",
									"        }\r",
									"        if (index === 4) {\r",
									"            pm.expect(tax.tax).to.equal(101500);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalIncome\": 2500000.0,\r\n    \"wht\": 125000.0,\r\n    \"allowances\": [\r\n        {\r\n            \"allowanceType\": \"k-receipt\",\r\n            \"amount\": 50000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"k-receipt\",\r\n            \"amount\": 70000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 80000.0\r\n        },\r\n        {\r\n            \"allowanceType\": \"donation\",\r\n            \"amount\": 120000.0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tax/calculations",
							"host": [
								"{{url}}"
							],
							"path": [
								"tax",
								"calculations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "EXP05: set personal deduction = 70,000 (expect 70,000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect personalDeduction is 70,000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.personalDeduction).to.eql(70000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 70000.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/personal",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"personal"
							]
						}
					},
					"response": []
				},
				{
					"name": "set with min (open-bound) personal deduction = 10,000 (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"expect error message is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).is.not.empty\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 10000.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/personal",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"personal"
							]
						}
					},
					"response": []
				},
				{
					"name": "set over min (open-bound) personal deduction = 10,000.01 (success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect personalDeduction is 10,000.01\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.personalDeduction).to.eql(10000.01);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 10000.01\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/personal",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"personal"
							]
						}
					},
					"response": []
				},
				{
					"name": "set max personal deduction = 100,000 (expect 100,000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect personalDeduction is 100,000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.personalDeduction).to.eql(100000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 100000.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/personal",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"personal"
							]
						}
					},
					"response": []
				},
				{
					"name": "set with over max personal deduction = 100,000.01 (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"expect error message is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).is.not.empty\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 100000.01\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/personal",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"personal"
							]
						}
					},
					"response": []
				},
				{
					"name": "set default personal deduction = 60,000 (expect 60,000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect personalDeduction is 60,000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.personalDeduction).to.eql(60000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 60000.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/personal",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"personal"
							]
						}
					},
					"response": []
				},
				{
					"name": "EXP08: set k-receipt deduction = 70,000 (expect 70,000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect kReceipt is 70,000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.kReceipt).to.eql(70000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 70000.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/k-receipt",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"k-receipt"
							]
						}
					},
					"response": []
				},
				{
					"name": "set with min (open-bound) k-receipt deduction = 0 (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"expect error message is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).is.not.empty\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 0.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/k-receipt",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"k-receipt"
							]
						}
					},
					"response": []
				},
				{
					"name": "set over min (open-bound) personal deduction = 0.01 (success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect kReceipt is 0.01\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.kReceipt).to.eql(0.01);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 0.01\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/k-receipt",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"k-receipt"
							]
						}
					},
					"response": []
				},
				{
					"name": "set max k-receipt deduction = 100,000 (expect 100,000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect kReceipt is 100,000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.kReceipt).to.eql(100000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 100000.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/k-receipt",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"k-receipt"
							]
						}
					},
					"response": []
				},
				{
					"name": "set with over max k-receipt deduction = 100,000.01 (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"expect error message is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).is.not.empty\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 100000.01\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/k-receipt",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"k-receipt"
							]
						}
					},
					"response": []
				},
				{
					"name": "set default k-receipt deduction = 50,000 (expect 50,000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"expect kReceipt is 50,000\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.kReceipt).to.eql(50000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 50000.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/deductions/k-receipt",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"deductions",
								"k-receipt"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}